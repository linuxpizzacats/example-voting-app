pipeline {

    agent none


    stages {

        stage('build') {
          agent {
            docker {
              image 'python:2.7.18-slim'
              args '--user root'
            }
          }
            when {
              changeset '**/vote/**'
            }
            steps {
                echo 'Building vote app'
                dir('vote') {
                  sh 'pip install -r requirements.txt'
                }
            }
        }
        stage('test') {
            agent {
              docker {
                image 'python:2.7.18-slim'
                args '--user root'
              }
            }
            when {
              changeset '**/vote/**'
            }
            steps {
                echo 'Running unit test on vote app'
                dir('vote') {
                  sh 'nosetests -v'
                }
            }
        }
        stage('docker-package') {
            agent any
            when {
              changeset '**/vote/**'
              branch 'master'
            }
            steps {
                echo 'Package vote app with docker'
                script {
                  docker.withRegistry("https://index.docker.io/v1/","dockerlogin"){
                    def workerImage = docker.build("linuxpizzacats/vote:v${env.BUILD_ID}","./vote")
                    workerImage.push()
                    workerImage.push("${env.BRANCH_NAME}")
                  }
                }
            }
        }
    }
    post{
        always{
	    slackSend (channel: "lfs261", message: "vote-app: Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            echo 'Pipeline for vote app has finished!!!'
        }
	failure{
	    slackSend (channel: "lfs261", message: "vote-app: Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
	}
	success{
	    slackSend (channel: "lfs261", message: "vote-app: Build Success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
	}
    }
}
